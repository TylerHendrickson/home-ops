---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: sonarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            envFrom: &envFrom
              - secretRef:
                  name: sonarr-secret
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/sonarr
              tag: 4.0.2.1183@sha256:42ba5af9b0ea20f4db4622991e0f1657be02c6e8747872c652fdac193c097b25
            env:
              COMPlus_EnableDiagnostics: "0"
              SONARR__AUTHENTICATION_METHOD: External
              SONARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              # SONARR__INSTANCE_NAME: Sonarr
              SONARR__PORT: &port 80
              TZ: "America/Chicago"
            envFrom: *envFrom
            probes:
              # liveness: &probes
              #   enabled: true
              #   custom: true
              #   spec:
              #     httpGet:
              #       path: /ping
              #       port: *port
              #     initialDelaySeconds: 0
              #     periodSeconds: 10
              #     timeoutSeconds: 1
              #     failureThreshold: 3
              # readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 1Gi
        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            runAsNonRoot: true
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups:
              - 100
              - 1000
              - 1001
    service:
      main:
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        className: internal
        hosts:
          - host: &host "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config
      tmp:
        type: emptyDir
      media:
        type: nfs
        server: 192.168.1.95
        path: /volume1/warehouse1
        globalMounts:
          - path: /media/cardhu-warehouse1
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: NotIn
                values:
                  - "true"
              - key: node-role.kubernetes.io/control-plane
                operator: NotIn
                values:
                  - "true"
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                  - "true"
              - key: node-role.kubernetes.io/worder
                operator: Exists
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - "true"
